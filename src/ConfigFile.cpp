#include "ConfigFile.h"
#include <iostream>
#include <fstream>
#include <windows.h>

void ConfigFile::removeComment(std::string &line) const
{
  if (line.find('#') != line.npos)
  {
    line.erase(line.find('#'));
  }
}

bool ConfigFile::onlyWhitespace(const std::string &line) const
{
  return (line.find_first_not_of(' ') == line.npos);
}

bool ConfigFile::validLine(const std::string &line) const
{
  std::string temp = line;
  temp.erase(0, temp.find_first_not_of("\t "));
  if (temp[0] == '=')
  {
    return false;
  }

  for (size_t i = temp.find('=') + 1; i < temp.length(); i++)
  {
    if (temp[i] != ' ')
    {
      return true;
    }
  }

  return false;
}

void ConfigFile::extractKey(std::string &key, size_t const &sepPos, const std::string &line) const
{
  key = line.substr(0, sepPos);
  key.erase(0, key.find_first_not_of("\t "));
  key.erase(key.find_last_not_of("\t ")+1);

}
void ConfigFile::extractValue(std::string &value, size_t const &sepPos, const std::string &line) const
{
  value = line.substr(sepPos + 1);
  value.erase(0, value.find_first_not_of("\t "));
  value.erase(value.find_last_not_of("\t ") + 1);
}

void ConfigFile::extractContents(const std::string &line, size_t const lineNo)
{
  std::string temp = line;
  temp.erase(0, temp.find_first_not_of("\t "));
  size_t sepPos = temp.find('=');

  std::string key, value;
  extractKey(key, sepPos, temp);
  extractValue(value, sepPos, temp);

  if (!keyExists(key))
  {
    contents.insert(std::pair<std::string, std::string>(key, value));
  }
  else
  {
    exitWithError("CFG: Can only have unique key names! (line: " + Convert::T_to_string(lineNo) + ")\n");
  }
}

void ConfigFile::parseLine(const std::string &line, size_t const lineNo)
{
  if (line.find('=') == line.npos)
  {
    exitWithError("CFG: Couldn't find separator on line: " + Convert::T_to_string(lineNo) + "\n");
  }

  if (!validLine(line))
  {
    exitWithError("CFG: Bad format for line: " + Convert::T_to_string(lineNo) + "\n");
  }

  extractContents(line, lineNo);
}

void ConfigFile::ExtractKeys()
{
  std::ifstream file;
  file.open(fName.c_str());

  if (!file)
  {
    printf("%s not found! Building a fresh one... ", fName.c_str());

    std::ofstream outfile("config.ini");

    // Begin config dump to file
    outfile << "#	ALLYG DEFAULT CONFIGURATION rev1.0 - Auto generated by AllyG360." << std::endl;
    outfile << "#	If you want a fresh one, just DELETE THIS FILE and re-run AllyG360." << std::endl;
    outfile << "#	Set which controller buttons will activate the configuration events." << std::endl;
    outfile << "#	SET 0 FOR NO FUNCTION." << std::endl;
    outfile << "#	AVAILABLE VALUES AT https://msdn.microsoft.com/en-us/library/windows/desktop/microsoft.directx_sdk.reference.xinput_gamepad(v=vs.85).aspx" << std::endl;
    outfile << "#	TIP: Sum the hex value for double button shortcuts eg. 0x0010(START) 0x0020(BACK) so 0x0030(START+BACK) will trigger the event only when both are pressed." << std::endl;
    outfile << "\n" << std::endl;
    outfile << "CONFIG_MOUSE_LEFT = R1  	            # Left mouse button" << std::endl;
    outfile << "CONFIG_MOUSE_RIGHT = R2                 # Right mouse button" << std::endl;
    outfile << "CONFIG_MOUSE_MIDDLE = - 	            # Middle mouse button" << std::endl;
    outfile << "CONFIG_HIDE = L3 + R3 		            # Hides the terminal" << std::endl;
    outfile << "CONFIG_DISABLE = MENU + VIEW	        # Disables the AllyG" << std::endl;
    outfile << "CONFIG_DISABLE_VIBRATION = MENU + UP    # Disables AllyG Vibrations" << std::endl;
    outfile << "CONFIG_SPEED_CHANGE =  L1 + R1	        # Change speed" << std::endl;
    outfile << "CONFIG_THROTTLE = L3      	            # Temp boost speed" << std::endl;
    outfile << "#CONFIG_OSK = MENU + DOWN               # Toggle on-screen keyboard" << std::endl;
    outfile << "\n" << std::endl;
    outfile << "#	KEYBOARD SHORTCUTS ON CONTROLLER BUTTONS" << std::endl;
    outfile << "#	AVAILABLE VALUES AT> https://msdn.microsoft.com/en-us/library/windows/desktop/dd375731" << std::endl;
    outfile << "\n" << std::endl;

    outfile << "#	PERMANENT SHORTCUTS: " << std::endl;
    outfile << "#	PLEASE BE AWARE THIS SHORTCUNT MAY INTERFE WITH GAMING: " << std::endl;
    outfile << "MAP GUIDE + DPAD_LEFT = ALT + SHIFT + TAB" << std::endl;
    outfile << "MAP GUIDE + DPAD_RIGHT = ALT + TAB" << std::endl;
    outfile << "MAP GUIDE + MENU + VIEW = ALT + F4" << std::endl;

    outfile << "#	ONLY IN ACTIVE MODE: " << std::endl;
    outfile << "GAMEPAD_DPAD_UP = UP" << std::endl;
    outfile << "GAMEPAD_DPAD_DOWN = DOWN" << std::endl;
    outfile << "GAMEPAD_DPAD_LEFT = LEFT" << std::endl;
    outfile << "GAMEPAD_DPAD_RIGHT = RIGHT" << std::endl;
    outfile << "GAMEPAD_START = -" << std::endl;
    outfile << "GAMEPAD_BACK = -" << std::endl;
    outfile << "GAMEPAD_LEFT_THUMB = -" << std::endl;
    outfile << "GAMEPAD_RIGHT_THUMB = -" << std::endl;
    outfile << "GAMEPAD_LEFT_SHOULDER = -" << std::endl;
    outfile << "GAMEPAD_RIGHT_SHOULDER = -" << std::endl;
    outfile << "GAMEPAD_A = ENTER" << std::endl;
    outfile << "GAMEPAD_B = ESC" << std::endl;
    outfile << "GAMEPAD_X = -" << std::endl;
    outfile << "GAMEPAD_Y = -" << std::endl;
    outfile << "GAMEPAD_TRIGGER_LEFT = -" << std::endl;
    outfile << "GAMEPAD_TRIGGER_RIGHT = -" << std::endl;
    outfile << "\n" << std::endl;
    outfile << "# ADVANCED CONFIGURATION SETTINGS" << std::endl;
    outfile << "#  ALLOWED CURSOR SPEEDS, FIRST WILL BE CHOSEN BY DEFAULT.  VALUES > 1.0 WILL BE IGNORED.  NO SPACES." << std::endl;
    outfile << "CURSOR_SPEED = NORMAL=0.05,FAST=0.1" << std::endl;
    outfile << "#  SET ACCELERATION FACTOR FOR NON-LINEAR CURSOR SPEED" << std::endl;
    outfile << "ACCELERATION_FACTOR = 3" << std::endl;
    outfile << "#  Swaps the function of the thumbsticks. Set to 0 for default behavior or set to 1 to have the mouse movement on the right stick and scrolling on the left stick." << std::endl;
    outfile << "SWAP_THUMBSTICKS = 0" << std::endl;
    // End config dump

    outfile.close();

    file.open(fName.c_str());

    if (!file)
    {

      exitWithError("\nERROR! Configuration file " + fName + " still couldn't be found!\n");
    }
    else
    {

      printf("Success!\nNow using %s.\n", fName.c_str());
    }
  }

  //exitWithError("\nSafety exit!\n");

  std::string line;
  size_t lineNo = 0;
  while (std::getline(file, line))
  {
    lineNo++;
    std::string temp = line;

    if (temp.empty())
    {
      continue;
    }

    removeComment(temp);
    if (onlyWhitespace(temp))
    {
      continue;
    }

    parseLine(temp, lineNo);
  }

  file.close();
}

ConfigFile::ConfigFile(const std::string &fName)
{
  this->fName = fName;
  ExtractKeys();
}

bool ConfigFile::keyExists(const std::string &key) const
{
  return contents.find(key) != contents.end();
}

void ConfigFile::exitWithError(const std::string &error)
{

  MessageBoxA(NULL,error.c_str(), "AllyG360: Error in Config", MB_ICONERROR | MB_OK);

  exit(EXIT_FAILURE);
}
